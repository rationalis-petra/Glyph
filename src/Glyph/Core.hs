module Glyph.Core (
  Core(..),
  Coreœá,
  Varœá,
  Uniœá,
  Prdœá,
  Absœá,
  Appœá)
  where

import Prelude hiding (lookup, length, head)
import Data.Text (Text)
import Prettyprinter


{---------------------------------- CORE TYPE ----------------------------------}
{- The Core Type represents the core calculus upon which Glyph is based. It is -}
{- the primary Representation of Syntax used within the Compiler   .           -}
{-                                                                             -}
{- Core takes two type parameters, n and œá, which serve the following purpose: -}
{- ‚Ä¢ n represents the type of names, and might change when:                    -}
{-   ‚Ä¢ Representing metavariables in unification                               -}
{-   ‚Ä¢ Representing names which have not yet been resolved after parsing       -}
{-   ‚Ä¢ Representing names amenable to Œ±-equivalence (e.g. DeBruijn indices)    -}
{- ‚Ä¢ œá is used as part of the 'trees that grow' idiom, and is used to make     -}
{-   variants of the syntax tree. Variants can include extra nodes or attach   -}
{-   extra information to each node, e.g.                                      -}
{-   ‚Ä¢ Keeping track of the source file a value came from                      -}
{-   ‚Ä¢ Adding extra type information to a node                                 -}
{-   ‚Ä¢ Adding a new node for constants (numbers etc.)                          -}
{-                                                                             -}


data Core n œá
  = Coreœá (Coreœá œá)
  | Uni (Uniœá œá) Int 
  | Var (Varœá œá) n
  | Prd (Prdœá œá) Text (Core n œá) (Core n œá)
  | Abs (Absœá œá) Text (Core n œá)
  | App (Appœá œá) (Core n œá) (Core n œá)

type family Coreœá œá
type family Varœá œá
type family Uniœá œá
type family Prdœá œá
type family Absœá œá
type family Appœá œá


{--------------------------------- EQ INSTANCE ---------------------------------}
{- The Equal type class instance performs an equality check directly on the    -}
{- names - this means that an Eq instance is only Œ± equality if the name type  -}
{- is a Debruijn index.                                                        -}


instance (Eq n, Eq (Coreœá œá)) => Eq (Core n œá) where
  v1 == v2 = case (v1, v2) of 
    (Coreœá r, Coreœá r') -> r == r'
    (Uni _ n, Uni _ n') -> n == n'
    (Var _ n, Var _ n') -> n == n'
    (Prd _ x a b, Prd _ x' a' b') ->
      x == x' && a == a' && b == b'
    (Abs _ x e, Abs _ x' e') ->
      x == x' && e == e'
    (App _ l r, App _ l' r') ->
      l == l' && r == r'
    (_, _) -> False


{------------------------------ PRETTY PRINTING --------------------------------}
{- Instances for printing syntax trees to via the Prettyprinter library        -}

instance (Pretty n, Pretty (Coreœá œá)) => Pretty (Core n œá) where
  pretty c = case c of  
    Coreœá v -> pretty v
    Uni _ n -> "ùí∞" <> pretty n
    Var _ name -> pretty name
 
    Prd _ var a b -> pretty ("(" <> var) <+> ":" <+> pretty a <+> " ) ‚Üí " <+> pretty b
    Abs _ var e ->
      let (args, body) = telescope e
    
          telescope (Abs _ var e) =
            let (args, body) = telescope e in 
              (var : args, body)
          telescope body = ([], body)
    
          pretty_args var [] = pretty var
          pretty_args v (x : xs) = pretty_args v [] <+> pretty_args x xs
      in
        ("Œª [" <> pretty_args var args <> "]") <+> pretty body
    App _ l r -> pretty l <+> pretty r
